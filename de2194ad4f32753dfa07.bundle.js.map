{"version":3,"file":"de2194ad4f32753dfa07.bundle.js","mappings":"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","sources":["webpack://base_template/./src/grid.js","webpack://base_template/./src/tetromino.js","webpack://base_template/./src/game-logic.js","webpack://base_template/./src/ui.js","webpack://base_template/./src/controls.js","webpack://base_template/./src/leaderboard.js","webpack://base_template/./src/index.js"],"sourcesContent":["export const tetrisGrid = document.querySelector(\"#tetris-grid\");\nexport const gridCells = [];\n\nexport const miniGridContainer = document.querySelector(\"#mini-grid\");\nexport const miniGridCells = [];\nexport const width = 10;\n\nexport function createGameGrid() {\n  for (let i = 0; i < 200; i++) {\n    const gridCell = document.createElement(\"div\");\n    gridCell.classList.add(\"grid-cell\");\n    gridCells.push(gridCell);\n    tetrisGrid.append(gridCell);\n  }\n}\n\nexport function createPreviewGrid() {\n  for (let i = 0; i < 20; i++) {\n    const miniGridCell = document.createElement(\"div\");\n    miniGridCell.classList.add(\"mini-grid-cell\");\n    miniGridCells.push(miniGridCell);\n    miniGridContainer.append(miniGridCell);\n  }\n}\n","import { gridCells, width } from \"./grid\";\nimport { currentLevel, gameIsPaused, lockedCells } from \"./game-logic\";\nimport { spawnNewTetromino, clearFullRows } from \"./game-logic\";\n\nexport class Tetromino {\n  constructor(shape, type) {\n    this.shapes = shape;\n    this.type = type;\n    this.origin = -6;\n    this.rotationIndex = 0;\n    this.fallInterval = null;\n  }\n  get cells() {\n    return this.shapes[this.rotationIndex].map(\n      (offset) => this.origin + offset\n    );\n  }\n  renderTetromino() {\n    this.cells.forEach((i) => {\n      if (gridCells[i]) {\n        gridCells[i].classList.add(\"tetromino-cell\", this.type);\n      }\n    });\n  }\n\n  clearTetromino() {\n    this.cells.forEach((i) => {\n      if (gridCells[i])\n        gridCells[i].classList.remove(\"tetromino-cell\", this.type);\n    });\n  }\n\n  moveLeft() {\n    const canMove = this.cells.every(\n      (i) => i % width !== 0 && !lockedCells.has(i - 1)\n    );\n    if (canMove) {\n      this.clearTetromino();\n      this.origin -= 1;\n      this.renderTetromino();\n    }\n  }\n\n  moveRight() {\n    const canMove = this.cells.every(\n      (i) => i % 10 !== 9 && !lockedCells.has(i + 1)\n    );\n    if (canMove) {\n      this.clearTetromino();\n      this.origin += 1;\n      this.renderTetromino();\n    }\n  }\n\n  moveDown() {\n    const canMove = this.cells.every(\n      (i) => i + width < gridCells.length && !lockedCells.has(i + width)\n    );\n    if (canMove) {\n      this.clearTetromino();\n      this.origin += width;\n      this.renderTetromino();\n    }\n  }\n\n  rotate() {\n    const nextRotationIndex = (this.rotationIndex + 1) % this.shapes.length;\n\n    const tryRotation = (originOffset = 0) => {\n      const newOrigin = this.origin + originOffset;\n      const nextCells = this.shapes[nextRotationIndex].map(\n        (offset) => newOrigin + offset\n      );\n\n      const currentCol = newOrigin % width;\n\n      const isValid = nextCells.every((i) => {\n        const x = i % width;\n        const y = Math.floor(i / width);\n        const withinHorizontalBounds = x >= 0 && x < width;\n        const withinVerticalBounds = y >= 0 && y < 20;\n        const notLocked = !lockedCells.has(i);\n        return withinHorizontalBounds && withinVerticalBounds && notLocked;\n      });\n\n      const doesNotWrap = nextCells.every(\n        (cell) =>\n          Math.floor(cell / width) === Math.floor(newOrigin / width) ||\n          Math.abs((cell % width) - currentCol) <= 3\n      );\n\n      if (isValid && doesNotWrap) {\n        this.clearTetromino();\n        this.origin = newOrigin;\n        this.rotationIndex = nextRotationIndex;\n        this.renderTetromino();\n        return true;\n      }\n\n      return false;\n    };\n    if (\n      tryRotation(0) ||\n      tryRotation(-1) ||\n      tryRotation(1) ||\n      tryRotation(-2) ||\n      tryRotation(2)\n    ) {\n      return;\n    }\n  }\n\n  fall() {\n    const speed = Math.max(100, 500 - (currentLevel - 1) * 50);\n    this.fallInterval = setInterval(() => {\n      if (gameIsPaused) return;\n      const canFall = this.cells.every(\n        (i) => i + 10 < 200 && !lockedCells.has(i + 10)\n      );\n      if (canFall) {\n        this.clearTetromino();\n        this.origin += 10;\n        this.renderTetromino();\n      } else {\n        this.lockTetromino();\n        clearInterval(this.fallInterval);\n      }\n    }, speed);\n  }\n  lockTetromino() {\n    this.cells.forEach((cell) => {\n      lockedCells.add(cell);\n    });\n    spawnNewTetromino();\n    clearFullRows();\n  }\n}\nconst tetrominoTypes = [\n  {\n    shape: [\n      [0, 0 + width, 0 + width * 2, 0 + width * 2 + 1],\n      [-1, 0, 1, -1 + width],\n      [0, 1, 1 + width, 1 + width * 2],\n      [1, 1 + width - 2, 1 + width - 1, 1 + width],\n    ],\n    type: \"L\",\n  },\n  {\n    shape: [\n      [0, 1, width, width * 2],\n      [-1, 0, 1, 1 + width],\n      [0, width, width * 2 - 1, width * 2],\n      [width - 1, width * 2 - 1, width * 2, width * 2 + 1],\n    ],\n    type: \"J\",\n  },\n  {\n    shape: [\n      [1, width + 1, width * 2 + 1, width * 3 + 1],\n      [width, width + 1, width + 2, width + 3],\n    ],\n    type: \"I\",\n  },\n  {\n    shape: [\n      [0, 1, width + 1, width + 2],\n      [1, width, width + 1, width * 2],\n    ],\n    type: \"Z\",\n  },\n  {\n    shape: [\n      [0, 1, width - 1, width],\n      [-1, width - 1, width, width * 2],\n    ],\n    type: \"S\",\n  },\n  {\n    shape: [\n      [1, width, width + 1, width + 2],\n      [1, width + 1, width + 2, width * 2 + 1],\n      [width, width + 1, width + 2, width * 2 + 1],\n      [1, width, width + 1, width * 2 + 1],\n    ],\n    type: \"T\",\n  },\n  { shape: [[-1, 0, width - 1, width]], type: \"O\" },\n];\n\nexport function getRandomTetromino() {\n  const random = Math.floor(Math.random() * tetrominoTypes.length);\n  const t = tetrominoTypes[random];\n  return new Tetromino(t.shape, t.type);\n}\n","import { gridCells, width } from \"./grid\";\nimport { getRandomTetromino } from \"./tetromino\";\nimport {\n  gameScoreContainer,\n  updateLevelDisplay,\n  showNextTetromino,\n  gameOverModal,\n  updateFinalScore,\n  showLowScoreImage,\n  animateLevelUp,\n} from \"./ui\";\n\nexport let gameIsPaused = false;\nexport let gameIsOver = false;\nexport let lockedCells = new Set();\n\nexport let currentLevel = 1;\nexport let gameScore = 0;\nexport let rowsCleared = 0;\n\nexport let currentTetromino;\nexport let nextTetromino;\n\nexport function pauseTheGame() {\n  gameIsPaused = !gameIsPaused;\n  return gameIsPaused;\n}\n\nexport function clearFullRows() {\n  for (let i = gridCells.length - width; i >= 0; i -= width) {\n    const row = [];\n    for (let j = 0; j < width; j++) {\n      row.push(i + j);\n    }\n    const isFull = row.every((cell) => lockedCells.has(cell));\n\n    if (isFull) {\n      row.forEach((rowCell) => {\n        lockedCells.delete(rowCell);\n        gridCells[rowCell].className = \"grid-cell\";\n      });\n      gameScore += 10;\n      gameScoreContainer.textContent = gameScore;\n\n      rowsCleared += 1;\n\n      if (rowsCleared % 10 === 0) {\n        currentLevel += 1;\n        updateLevelDisplay();\n        animateLevelUp();\n      }\n\n      for (let k = i - 1; k >= 0; k--) {\n        if (lockedCells.has(k)) {\n          lockedCells.delete(k);\n          lockedCells.add(k + width);\n          const currentClasses = Array.from(gridCells[k].classList).filter(\n            (cls) => cls !== \"grid-cell\"\n          );\n          gridCells[k + width].className =\n            \"grid-cell \" + currentClasses.join(\" \");\n          gridCells[k].className = \"grid-cell\";\n        }\n      }\n      i += width;\n    }\n  }\n}\nexport function spawnNewTetromino() {\n  if (gameIsOver) return;\n\n  if (!nextTetromino) {\n    nextTetromino = getRandomTetromino();\n  }\n\n  currentTetromino = nextTetromino;\n\n  nextTetromino = getRandomTetromino();\n  showNextTetromino(nextTetromino);\n\n  if (\n    currentTetromino.cells.some((cell) => cell >= 0 && lockedCells.has(cell))\n  ) {\n    gameOver();\n    return;\n  }\n  currentTetromino.renderTetromino();\n  currentTetromino.fall();\n}\nexport function gameOver() {\n  gameIsOver = true;\n  clearInterval(currentTetromino.fallInterval);\n  updateFinalScore();\n\n  const form = document.querySelector(\"#add-name__form\");\n  const resultContainer = document.querySelector(\"#submission-feedback\");\n  resultContainer.innerHTML = \"\";\n\n  const leaderboard = JSON.parse(localStorage.getItem(\"leaderboard\")) || [];\n\n  const qualifiesForLeaderboard =\n    gameScore > 0 &&\n    (leaderboard.length < 10 ||\n      gameScore > leaderboard[leaderboard.length - 1]?.score);\n\n  if (qualifiesForLeaderboard) {\n    form.style.display = \"block\";\n  } else {\n    form.style.display = \"none\";\n    showLowScoreImage();\n  }\n\n  gameOverModal.showModal();\n}\n\nexport function resetGame() {\n  lockedCells.clear();\n  gameScore = 0;\n  gameScoreContainer.textContent = 0;\n  gameIsOver = false;\n  rowsCleared = 0;\n  currentLevel = 1;\n  updateLevelDisplay();\n  gridCells.forEach((cell) => {\n    cell.className = \"grid-cell\";\n  });\n  spawnNewTetromino();\n}\n","import { miniGridCells } from \"./grid\";\nimport {\n  gameIsPaused,\n  gameIsOver,\n  currentLevel,\n  gameScore,\n  pauseTheGame,\n} from \"./game-logic\";\n\nexport const gameScoreContainer = document.querySelector(\"#game-score\");\nconst pauseBtn = document.querySelector(\"#btn-pause\");\nconst pauseOverlay = document.querySelector(\"#pause-overlay\");\nexport const gameOverModal = document.querySelector(\"#game-over__modal\");\nconst resultImageContainer = document.querySelector(\"#submission-feedback\");\nconst resultImage = document.createElement(\"img\");\nresultImage.classList.add(\"game-result-image\");\nconst previewShapes = {\n  L: [2, 7, 12, 13],\n  J: [2, 3, 7, 12],\n  I: [2, 7, 12, 17],\n  Z: [6, 7, 12, 13],\n  S: [7, 8, 11, 12],\n  T: [7, 11, 12, 13],\n  O: [6, 7, 11, 12],\n};\nexport function showNextTetromino(tetromino) {\n  miniGridCells.forEach((cell) => {\n    cell.className = \"mini-grid-cell\";\n  });\n\n  const previewOffsets = previewShapes[tetromino.type];\n  previewOffsets.forEach((index) => {\n    if (miniGridCells[index]) {\n      miniGridCells[index].classList.add(\"tetromino-cell\", tetromino.type);\n    }\n  });\n}\npauseBtn.addEventListener(\"click\", () => {\n  if (gameIsOver) return;\n  pauseTheGame();\n\n  pauseBtn.textContent = gameIsPaused ? \"Resume\" : \"Pause\";\n  pauseOverlay.style.visibility = gameIsPaused ? \"visible\" : \"hidden\";\n});\n\nexport function updateLevelDisplay() {\n  document.querySelector(\"#game-level\").textContent = currentLevel;\n}\nexport function updateFinalScore() {\n  const finalScoreContainer = document.querySelector(\"#final-score\");\n  finalScoreContainer.textContent = gameScore;\n}\n\nexport function showLowScoreImage() {\n  const lowScoreMessage = document.createElement(\"p\");\n  lowScoreMessage.innerHTML = \"Almost legendary! Try again!\";\n  lowScoreMessage.classList.add(\"low-score-message\");\n  resultImage.src = \"../images/oops.png\";\n  resultImageContainer.append(resultImage, lowScoreMessage);\n}\n\nexport function showHighScoreImage() {\n  resultImage.src = \"../images/success_name-submitted.png\";\n  resultImageContainer.appendChild(resultImage);\n}\n\nexport function animateLevelUp() {\n  const levelUpContainer = document.querySelector(\"#level-up-animation\");\n\n  levelUpContainer.classList.remove(\"level-up-hidden\");\n  levelUpContainer.classList.add(\"level-up-show\");\n\n  setTimeout(() => {\n    levelUpContainer.classList.remove(\"level-up-show\");\n    levelUpContainer.classList.add(\"level-up-hidden\");\n  }, 1500);\n}\n","import { gameIsOver, gameIsPaused, currentTetromino } from \"./game-logic\";\ndocument.addEventListener(\"keydown\", (e) => {\n  if (gameIsOver || gameIsPaused) return;\n  if (e.key === \"ArrowLeft\") currentTetromino.moveLeft();\n  if (e.key === \"ArrowRight\") currentTetromino.moveRight();\n  if (e.key === \"Enter\") currentTetromino.rotate();\n  if (e.key === \"ArrowDown\") currentTetromino.moveDown();\n  console.log(e.key);\n});\n","import { gameScore, resetGame } from \"./game-logic\";\nimport { showHighScoreImage } from \"./ui\";\n\nconst addNameForm = document.querySelector(\"#add-name__form\");\nconst finalScoreContainer = document.querySelector(\"#final-score\");\nconst leaderboardContainer = document.querySelector(\"#leaderboard-list\");\nconst playAgainButton = document.querySelector(\"#play-again__button\");\n\naddNameForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  const playerName = addNameForm.elements.player.value.trim();\n  const input = addNameForm.elements.player;\n\n  if (!playerName) {\n    input.classList.add(\"shake\");\n    setTimeout(() => {\n      input.classList.remove(\"shake\");\n    }, 400);\n    return;\n  }\n\n  const stored = localStorage.getItem(\"leaderboard\");\n  let leaderboard = stored ? JSON.parse(stored) : [];\n\n  const sameScoreEntry = leaderboard.find((entry) => entry.score === gameScore);\n\n  if (sameScoreEntry) {\n    sameScoreEntry.name = playerName;\n  } else {\n    leaderboard.push({ name: playerName, score: gameScore });\n  }\n  leaderboard.sort((a, b) => b.score - a.score);\n  leaderboard = leaderboard.slice(0, 5);\n\n  localStorage.setItem(\"leaderboard\", JSON.stringify(leaderboard));\n\n  updateLeaderboard();\n  finalScoreContainer.textContent = gameScore;\n  addNameForm.elements.player.value = \"\";\n  addNameForm.style.display = \"none\";\n  showHighScoreImage();\n});\n\nfunction updateLeaderboard() {\n  const leaderboard = JSON.parse(localStorage.getItem(\"leaderboard\")) || [];\n\n  leaderboardContainer.innerHTML = \"\";\n\n  leaderboard.forEach((entry) => {\n    const li = document.createElement(\"li\");\n    li.textContent = `${entry.name} - ${entry.score}`;\n    leaderboardContainer.appendChild(li);\n  });\n}\nupdateLeaderboard();\n\nplayAgainButton.addEventListener(\"click\", () => {\n  document.querySelector(\"#game-over__modal\").close();\n\n  resetGame();\n});\n","import \"./styles/main.css\";\nimport { createGameGrid, createPreviewGrid } from \"./grid\";\nimport { spawnNewTetromino } from \"./game-logic\";\nimport \"./controls.js\";\nimport \"./leaderboard.js\";\n\ncreateGameGrid();\ncreatePreviewGrid();\nspawnNewTetromino();\n"],"names":["tetrisGrid","document","querySelector","gridCells","miniGridContainer","miniGridCells","width","Tetromino","shape","type","_classCallCheck","this","shapes","origin","rotationIndex","fallInterval","key","get","_this","map","offset","value","_this2","cells","forEach","i","classList","add","_this3","remove","every","lockedCells","has","clearTetromino","renderTetromino","length","_this4","nextRotationIndex","tryRotation","originOffset","arguments","undefined","newOrigin","nextCells","currentCol","isValid","x","y","Math","floor","withinHorizontalBounds","withinVerticalBounds","notLocked","doesNotWrap","cell","abs","_this5","speed","max","currentLevel","setInterval","gameIsPaused","lockTetromino","clearInterval","spawnNewTetromino","row","j","push","rowCell","className","gameScore","gameScoreContainer","textContent","rowsCleared","updateLevelDisplay","animateLevelUp","k","currentClasses","Array","from","filter","cls","join","clearFullRows","tetrominoTypes","getRandomTetromino","random","t","pauseBtn","pauseOverlay","gameOverModal","resultImageContainer","resultImage","createElement","previewShapes","L","J","I","Z","S","T","O","levelUpContainer","setTimeout","addEventListener","gameIsOver","style","visibility","currentTetromino","nextTetromino","Set","tetromino","index","some","_leaderboard","form","innerHTML","lowScoreMessage","leaderboard","JSON","parse","localStorage","getItem","score","display","src","append","showModal","gameOver","fall","e","moveLeft","moveRight","rotate","moveDown","console","log","addNameForm","finalScoreContainer","leaderboardContainer","playAgainButton","updateLeaderboard","entry","li","concat","name","appendChild","preventDefault","playerName","elements","player","trim","input","stored","sameScoreEntry","find","sort","a","b","slice","setItem","stringify","close","clear","gridCell","createGameGrid","miniGridCell","createPreviewGrid"],"sourceRoot":""}